AWSTemplateFormatVersion: 2010-09-09
Description:  This template deploys a VPC, with a public and private subnet 
  in a single Availability Zone for simple isolated development environments. 
  It deploys an internet gateway, with a default route on the public subnet.
  It deploys a NAT gateway and default route for it in the private subnet.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16 # 10.192.0.1 --> 10.192.255.254 (65,536 addresses)

  AZ:
    Description: The Availability Zone for the public and private subnets 
    Type: String 

  PublicSubnetCIDR:
    Description: Enter the IP range (CIDR notation) for the public subnet within the single AZ
    Type: String
    Default: 10.192.10.0/24 # 10.192.10.1 --> 10.192.10.254 (256 addresses)

  PrivateSubnetCIDR:
    Description: Enter the IP range (CIDR notation) for the private subnet within the Single AZ
    Type: String
    Default: 10.192.20.0/24 # 10.192.20.1 --> 10.192.20.254 (256 addresses)

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ)

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AZ
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ)

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-no-ingress-sg
      GroupDescription: "Security group with no ingress rule but, still useful for enabling communication between instances"
      VpcId: !Ref VPC

  SshPingWithinVpcSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-ssh-icmp-vpc-only
      GroupDescription: "Allows for SSH and ping connections between instances within VPC"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref NoIngressSecurityGroup
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          SourceSecurityGroupId: !Ref NoIngressSecurityGroup

  WebVpcSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-http-https-all
      GroupDescription: "Allows for HTTP and HTTPS traffic from anywhere"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-simple-vpc"

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Ref PublicSubnet

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Ref PrivateSubnet

  PublicSubnet:
    Description: A reference to the public subnet in the Availability Zone
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-simple-vpc-public-subnet"

  PrivateSubnet:
    Description: A reference to the private subnet in the Availability Zone
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub "${AWS::StackName}-simple-vpc-private-subnet"

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-simple-vpc-no-ingress-sg"

  SshPingWithinVpcSecurityGroup:
    Description: Security group allowing SSH and ICMP within the VPC between Instances
    Value: !Ref SshPingWithinVpcSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-simple-vpc-ssh-icmp-sg"

  WebVpcSecurityGroup:
    Description: Security group allowing HTTP/HTTPS traffic
    Value: !Ref WebVpcSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-simple-vpc-http-https-sg"
